// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.cimsi.project.dependencies;

import com.cimsi.project.ui.MainActivity;
import com.cimsi.project.ui.MainActivityPresenter;
import com.cimsi.project.ui.MainActivity_MembersInjector;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.Preconditions;

public final class DaggerActivityComponent implements ActivityComponent {
  private BikesApiModule bikesApiModule;

  private DaggerActivityComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ActivityComponent create() {
    return new Builder().build();
  }

  private MainActivityPresenter getMainActivityPresenter() {
    return new MainActivityPresenter(
        Preconditions.checkNotNull(
            bikesApiModule.provideBikesApi(),
            "Cannot return null from a non-@Nullable @Provides method"));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.bikesApiModule = builder.bikesApiModule;
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  @CanIgnoreReturnValue
  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectPresenter(instance, getMainActivityPresenter());
    return instance;
  }

  public static final class Builder {
    private BikesApiModule bikesApiModule;

    private Builder() {}

    public ActivityComponent build() {
      if (bikesApiModule == null) {
        this.bikesApiModule = new BikesApiModule();
      }
      return new DaggerActivityComponent(this);
    }

    public Builder bikesApiModule(BikesApiModule bikesApiModule) {
      this.bikesApiModule = Preconditions.checkNotNull(bikesApiModule);
      return this;
    }
  }
}
